generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String   @db.Uuid
  token            String   @default(dbgenerated("md5((random())::text)"))
  ip               String   @db.Inet
  ua               String
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  last_accessed_at DateTime @default(now()) @db.Timestamptz(6)
  additional_info  Json?
  users            users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USERID")

  @@index([user_id], map: "fki_FK_USERID")
}

model users {
  id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username     String                 @db.VarChar(32)
  display_name String?                @db.VarChar(64)
  password     String                 @db.VarChar(128)
  created_at   DateTime?              @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamptz(6)
  preferences  Json?
  avatar       String?                @db.VarChar(64)
  auth         auth[]
  videos       videos[]
}

model videos {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?   @db.Uuid
  title       String    @db.VarChar(255)
  description String?   @db.VarChar(5000)
  thumbnail   String?   @db.Uuid
  duration    Float?
  upload_date DateTime? @default(now()) @db.Timestamp(6)
  is_private  Boolean?  @default(true)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_user_id")
}
